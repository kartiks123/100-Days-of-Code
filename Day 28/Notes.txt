When we want to move an element from its original position to 3px downwords, we can use 'position : relative' and then 
define 'top: 3px;' to tell it to move 3 pixels downwards.

Using z-index, you can move each image, on top of each other.

-> 

Whatever boxes we make in HTML, their position are static. This means that on them, we can't apply z-indexing on top, bottom, 
left or right.

1) Position:Relative :
Setting position to relative, indicate that we are making our box move, with respect to its own, relative (original) position.

2) Z:Index :
Z indexing is done to make a certain element appear on top or behind of other elements.
Remember, it can only be set, when the position is something other than static.
Fact to Remember : More the index value, more it will be in front.

3) Position:Absolute :
Position Absolute set an element to the "nearest position ancestor". Also, this element does not need to be static in its 
position.
It also acts like, the element on which this is set, was never there in the first place, i.e., it never existed.

Note : If you make the position of the "parent" element to absolute, now elements from all box elements, will set according to 
the parent (papa) class, not the html class (par dada).

4) There are some content in our website, which we want their position to stay fixed at a single place, even if we scroll.
In this case, we use position:fixed.

5) position:sticky is used to mark the element in a certain position after we crossed the normal, static position of the 
element.
Eg - When we want to ask a user, to accept or reject cookies.



Exception properties :

Transform, Filter or Perspective properties can also make an element appear as positioned.
a) transform:translate(0); sets the position relative to the nearest ancestor element. In this case, the "parent" class.
b) filter:invert(); will invert (change) the color of the element it is set to.
c) perspective: 0em; will set the same as 'position:relative' or 'transform:translate(0)'

These will be discussed more in detail later.